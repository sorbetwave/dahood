-- // Configuration
getgenv().SilentAim = true
getgenv().FOVRadius = 80
getgenv().Prediction = 0.125
getgenv().Resolver = false

-- // Services
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local Workspace = game:GetService("Workspace")
local LocalPlayer = Players.LocalPlayer
local Mouse = LocalPlayer:GetMouse()
local Camera = Workspace.CurrentCamera
local Drawing = Drawing or loadstring(game:HttpGet("https://raw.githubusercontent.com/EdgeIY/infiniteyield/master/source"))()

-- // FOV Circle
local FOVCircle = Drawing.new("Circle")
FOVCircle.Position = Vector2.zero
FOVCircle.Radius = getgenv().FOVRadius
FOVCircle.Thickness = 1.5
FOVCircle.Transparency = 1
FOVCircle.Color = Color3.fromRGB(255, 255, 255)
FOVCircle.Filled = false
FOVCircle.Visible = true

-- // Functions
local function getClosestTarget()
    local closest = nil
    local shortestDistance = math.huge

    for _, player in ipairs(Players:GetPlayers()) do
        if player ~= LocalPlayer and player.Character and player.Character:FindFirstChild("HumanoidRootPart") and player.Character:FindFirstChildOfClass("Humanoid") then
            local hrp = player.Character.HumanoidRootPart
            local human = player.Character:FindFirstChildOfClass("Humanoid")

            if human and human.Health > 0 then
                local screenPos, onScreen = Camera:WorldToViewportPoint(hrp.Position)
                local mousePos = Vector2.new(Mouse.X, Mouse.Y)
                local targetPos = Vector2.new(screenPos.X, screenPos.Y)
                local distance = (mousePos - targetPos).Magnitude

                if onScreen and distance < shortestDistance and distance < getgenv().FOVRadius then
                    shortestDistance = distance
                    closest = hrp
                end
            end
        end
    end

    return closest
end

-- // Hook
local __namecall
__namecall = hookmetamethod(game, "__namecall", newcclosure(function(self, ...)
    local args = {...}
    local method = getnamecallmethod()

    if getgenv().SilentAim and tostring(self) == "Hit" and method == "FireServer" then
        local target = getClosestTarget()
        if target then
            local predictedPosition = target.Position + (getgenv().Resolver and target.Velocity * getgenv().Prediction or Vector3.zero)
            args[1] = predictedPosition
            return __namecall(self, unpack(args))
        end
    end

    return __namecall(self, ...)
end))

-- // FOV Update
RunService.RenderStepped:Connect(function()
    FOVCircle.Position = Vector2.new(Mouse.X, Mouse.Y)
end)

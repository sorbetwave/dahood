getgenv().silentaim = true
getgenv().prediction = 0.102
getgenv().offset = 0.6
getgenv().resolver = false
getgenv().healthThreshold = 1
getgenv().fovThreshold = 0.5

local players = game:GetService("Players")
local localplayer = players.LocalPlayer
local mouse = localplayer:GetMouse()
local currentCamera = workspace.CurrentCamera
local runservice = game:GetService("RunService")

local victim = nil
local velocity = Vector3.new(0, 0, 0)
local oldpos = Vector3.new(0, 0, 0)

-- Function to check visibility
local function isVisible(target)
    local origin = currentCamera.CFrame.Position
    local direction = target.Position - origin

    local raycastParams = RaycastParams.new()
    raycastParams.FilterType = Enum.RaycastFilterType.Blacklist
    raycastParams.FilterDescendantsInstances = {localplayer.Character}
    raycastParams.IgnoreWater = true

    local result = workspace:Raycast(origin, direction, raycastParams)
    if result then
        return result.Instance:IsDescendantOf(target.Parent)
    end
    return true
end

-- FOV check
local function isWithinFOV(target)
    local cameraPosition = currentCamera.CFrame.Position
    local targetPosition = target.Position
    local directionToTarget = (targetPosition - cameraPosition).unit
    local cameraDirection = currentCamera.CFrame.LookVector

    local dotProduct = directionToTarget:Dot(cameraDirection)
    return dotProduct > getgenv().fovThreshold
end

-- Target finder
local function getTarget()
    local closestTarget = nil
    local shortestDistance = math.huge

    for _, plr in pairs(players:GetPlayers()) do
        if plr ~= localplayer and plr.Character and plr.Character:FindFirstChild("HumanoidRootPart") then
            local humanoid = plr.Character:FindFirstChildOfClass("Humanoid")
            if humanoid and humanoid.Health > getgenv().healthThreshold then
                local success, screenPos = pcall(function()
                    return currentCamera:WorldToViewportPoint(plr.Character.HumanoidRootPart.Position)
                end)

                if success and screenPos.Z > 0 and isWithinFOV(plr.Character.HumanoidRootPart) and isVisible(plr.Character.HumanoidRootPart) then
                    local distance = (Vector2.new(mouse.X, mouse.Y) - Vector2.new(screenPos.X, screenPos.Y)).Magnitude
                    if distance < shortestDistance then
                        closestTarget = plr.Character.HumanoidRootPart
                        shortestDistance = distance
                    end
                end
            end
        end
    end

    return closestTarget
end

-- Prediction calc
runservice.Heartbeat:Connect(function(deltaTime)
    if victim and victim.Parent then
        local currentpos = victim.Position
        local displacement = currentpos - oldpos
        local vector = displacement / deltaTime

        velocity = velocity:Lerp(Vector3.new(
            vector.X,
            vector.Y * 0.94 * getgenv().offset,
            vector.Z
        ), 0.4)

        oldpos = currentpos
    end
end)

-- Hook __namecall to apply silent aim
local mt = getrawmetatable(game)
setreadonly(mt, false)
local old = mt.__namecall

mt.__namecall = newcclosure(function(self, ...)
    local args = {...}
    local method = getnamecallmethod()

    if getgenv().silentaim and tostring(self) == "Hit" or tostring(self) == "Target" then
        victim = getTarget()
        if victim and victim.Parent then
            local predictedPos
            if getgenv().resolver then
                predictedPos = victim.Position + (velocity * getgenv().prediction)
            else
                predictedPos = victim.Position + (victim.V

getgenv().prediction = 0.102
getgenv().offset = 0.6
getgenv().resolver = false
getgenv().smoothness = 0.30
getgenv().healthThreshold = 1

local players = game:GetService("Players")
local localplayer = players.LocalPlayer
local mouse = localplayer:GetMouse()
local userinputservice = game:GetService("UserInputService")
local runservice = game:GetService("RunService")
local currentCamera = workspace.CurrentCamera

local victim = nil
local targeting = false
local fovThreshold = 0.5

-- Softlock shake function
local function addShake(position)
    local shakeMagnitude = 0.5
    local randomOffset = Vector3.new(
        (math.random() - 0.5) * 2 * shakeMagnitude,
        (math.random() - 0.5) * 2 * shakeMagnitude,
        (math.random() - 0.5) * 2 * shakeMagnitude
    )
    return position + randomOffset
end

local function isVisible(target)
    local origin = currentCamera.CFrame.Position
    local direction = target.Position - origin

    local raycastParams = RaycastParams.new()
    raycastParams.FilterType = Enum.RaycastFilterType.Blacklist
    raycastParams.FilterDescendantsInstances = {localplayer.Character}
    raycastParams.IgnoreWater = true

    local result = workspace:Raycast(origin, direction, raycastParams)
    if result then
        return result.Instance:IsDescendantOf(target.Parent)
    end

    return true
end

local function isWithinFOV(target)
    local cameraPosition = currentCamera.CFrame.Position
    local targetPosition = target.Position
    local directionToTarget = (targetPosition - cameraPosition).unit
    local cameraDirection = currentCamera.CFrame.LookVector

    local dotProduct = directionToTarget:Dot(cameraDirection)
    return dotProduct > fovThreshold
end

local function target()
    local target = nil
    local shortdistance = math.huge

    for _, plr in pairs(players:GetPlayers()) do
        if plr ~= localplayer and plr.Character and plr.Character:FindFirstChild("HumanoidRootPart") then
            local humanoid = plr.Character:FindFirstChildOfClass("Humanoid")
            if humanoid and humanoid.Health > 0 then
                local success, screenPos = pcall(function()
                    return currentCamera:WorldToViewportPoint(plr.Character.HumanoidRootPart.Position)
                end)

                if success and screenPos.Z > 0 and isWithinFOV(plr.Character.HumanoidRootPart) and isVisible(plr.Character.HumanoidRootPart) then
                    local distance = (Vector2.new(mouse.X, mouse.Y) - Vector2.new(screenPos.X, screenPos.Y)).Magnitude
                    if distance < shortdistance then
                        target = plr.Character.HumanoidRootPart
                        shortdistance = distance
                    end
                end
            end
        end
    end

    return target
end

local toggleKey = Enum.KeyCode.Q
userinputservice.InputBegan:Connect(function(input, processed)
    if processed then return end

    if input.KeyCode == toggleKey then
        targeting = not targeting
        victim = targeting and target() or nil
    end
end)

local velocity = Vector3.new(0, 0, 0)
local oldpos = Vector3.new(0, 0, 0)

runservice.Heartbeat:Connect(function(deltaTime)
    if victim and victim.Parent then
        local currentpos = victim.Position
        local displacement = currentpos - oldpos
        local vector = displacement / deltaTime

        velocity = velocity:Lerp(Vector3.new(
            vector.X,
            vector.Y * 0.94 * getgenv().offset,
            vector.Z
        ), 0.4)

        oldpos = currentpos
    end
end)

runservice.RenderStepped:Connect(function()
    if targeting and victim and victim.Parent then
        local character = victim.Parent
        local humanoid = character:FindFirstChildOfClass("Humanoid")

        if humanoid then
            if humanoid.Health <= getgenv().healthThreshold then
                targeting = false
                victim = nil
            else
                local pos
                if getgenv().usePrediction then
                    if getgenv().resolver then
                        pos = victim.Position + (velocity * getgenv().prediction)
                    else
                        pos = victim.Position + (victim.Velocity * getgenv().prediction)
                    end
                else
                    pos = victim.Position
                end

                currentCamera.CFrame = currentCamera.CFrame:Lerp(
                    CFrame.new(currentCamera.CFrame.Position, addShake(pos)),
                    getgenv().smoothness
                )
            end
        end
    end

    if localplayer.Character and localplayer.Character:FindFirstChildOfClass("Humanoid") then
        local humanoid = localplayer.Character:FindFirstChildOfClass("Humanoid")
        if humanoid and humanoid.Health <= 1 then
            targeting = false
            victim = nil
        end
    end
end)

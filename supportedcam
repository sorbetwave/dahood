getgenv().prediction = 0.102
getgenv().offset = 0.6
getgenv().resolver = false
getgenv().smoothness = 0.35
getgenv().healthThreshold = 5  -- Set to the health value where you want to unlock the target (health or below)

local players = game:GetService("Players")
local localplayer = players.LocalPlayer
local mouse = localplayer:GetMouse()
local userinputservice = game:GetService("UserInputService")
local runservice = game:GetService("RunService")
local currentCamera = workspace.CurrentCamera
local workspace = game:GetService("Workspace")

local victim = nil
local targeting = false
local fovThreshold = 0.5  -- Small FOV threshold (lower = smaller FOV, 1 is directly in front)

-- Function to calculate if the target is within the FOV (improved)
local function isWithinFOV(target)
    local cameraPosition = currentCamera.CFrame.Position
    local targetPosition = target.Position
    local directionToTarget = (targetPosition - cameraPosition).unit
    local cameraDirection = currentCamera.CFrame.LookVector

    -- Dot product to calculate the angle between the camera's direction and the target direction
    local dotProduct = directionToTarget:Dot(cameraDirection)

    -- Compare the dot product with the FOV threshold
    return dotProduct > fovThreshold
end

-- Function to check if there are any obstacles (walls) between the camera and the target
local function isBehindWall(target)
    local ray = Ray.new(currentCamera.CFrame.Position, (target.Position - currentCamera.CFrame.Position).unit * (currentCamera.CFrame.Position - target.Position).Magnitude)
    local hitPart = workspace:FindPartOnRay(ray, localplayer.Character)

    -- If hitPart is not nil and is not the target itself, it's a wall
    return hitPart and hitPart.Parent and hitPart.Parent ~= target.Parent
end

-- Optimized target function that checks the closest valid player within FOV, mouse distance, and no walls
local function target()
    local target = nil
    local shortdistance = math.huge

    for _, plr in pairs(players:GetPlayers()) do
        if plr ~= localplayer and plr.Character and plr.Character:FindFirstChild("HumanoidRootPart") then
            local humanoid = plr.Character:FindFirstChildOfClass("Humanoid")
            if humanoid and humanoid.Health > 0 then
                local success, screenPos = pcall(function()
                    return currentCamera:WorldToViewportPoint(plr.Character.HumanoidRootPart.Position)
                end)

                if success and screenPos.Z > 0 and isWithinFOV(plr.Character.HumanoidRootPart) and not isBehindWall(plr.Character.HumanoidRootPart) then
                    -- Check the distance from the mouse position
                    local distance = (Vector2.new(mouse.X, mouse.Y) - Vector2.new(screenPos.X, screenPos.Y)).Magnitude
                    if distance < shortdistance then
                        target = plr.Character.HumanoidRootPart
                        shortdistance = distance
                    end
                end
            end
        end
    end

    return target
end

-- Clean Q key toggle
local toggleKey = Enum.KeyCode.Q
userinputservice.InputBegan:Connect(function(input, processed)
    if processed then return end

    if input.KeyCode == toggleKey then
        targeting = not targeting
        victim = targeting and target() or nil
    end
end)

-- Velocity calculation
local velocity = Vector3.new(0, 0, 0)
local oldpos = Vector3.new(0, 0, 0)

runservice.Heartbeat:Connect(function(deltaTime)
    if victim and victim.Parent then
        local currentpos = victim.Position
        local displacement = currentpos - oldpos
        local vector = displacement / deltaTime

        velocity = velocity:Lerp(Vector3.new(
            vector.X,
            vector.Y * 0.94 * getgenv().offset,
            vector.Z
        ), 0.4)

        oldpos = currentpos
    end
end)

-- Aim logic with FOV check, health check (<= healthThreshold), and wall check
runservice.RenderStepped:Connect(function()
    if targeting and victim and victim.Parent then
        local character = victim.Parent
        local humanoid = character:FindFirstChildOfClass("Humanoid")

        if humanoid then
            -- Print debug information to see health value
            print("Target Health: " .. humanoid.Health)

            -- Check if the player's health is less than or equal to the specified value
            if humanoid.Health <= getgenv().healthThreshold then
                -- If the player's health is less than or equal to the specified value, unlock
                print("Unlocking Target because health is " .. humanoid.Health .. " <= " .. getgenv().healthThreshold)
                targeting = false
                victim = nil
            else
                -- If health is above the specified value and no wall in the way, perform aiming
                local pos
                if getgenv().usePrediction then
                    if getgenv().resolver then
                        pos = victim.Position + (velocity * getgenv().prediction)
                    else
                        pos = victim.Position + (victim.Velocity * getgenv().prediction)
                    end
                else
                    pos = victim.Position
                end

                currentCamera.CFrame = currentCamera.CFrame:Lerp(
                    CFrame.new(currentCamera.CFrame.Position, pos),
                    getgenv().smoothness
                )
            end
        end
    end
end)
